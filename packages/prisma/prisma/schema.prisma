generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  PROFESSIONAL
  ADMIN
}

enum Plan {
  FREE
  PRO
  PREMIUM
}

enum NotificationType {
  EMAIL
  PUSH
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum CalendarType {
  USER
  PROFESSIONAL
  FACILITY
  COMPANY
}

enum CalendarEventType {
  APPOINTMENT // Evento de agendamento
  BLOCK // Bloqueio genérico (ex: manutenção, indisponibilidade)
  VACATION // Férias
  BREAK // Intervalo
  CUSTOM // Outro tipo personalizado
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  phone         String?        @unique
  document      String?        @unique
  refreshToken  String?
  lastLogin     DateTime?
  role          Role
  professional  Professional?
  appointments  Appointment[]  @relation("ClientAppointments")
  notifications Notification[]
  calendars     Calendar[]     @relation("UserCalendars")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Professional {
  id                   String                  @id @default(uuid())
  userId               String                  @unique
  businessName         String
  specialties          String[]
  profileDescription   String?
  subscriptionPlan     Plan                    @default(FREE)
  isActive             Boolean                 @default(true)
  averageRating        Float                   @default(0)
  totalRatings         Int                     @default(0)
  totalAppointments    Int                     @default(0)
  user                 User                    @relation(fields: [userId], references: [id])
  companyId            String?
  company              Company?                @relation(fields: [companyId], references: [id])
  facilityId           String?
  facility             Facility?               @relation(fields: [facilityId], references: [id])
  calendars            Calendar[]              @relation("ProfessionalCalendars")
  appointments         Appointment[]           @relation("ProfessionalAppointments")
  assignedAppointments AppointmentAssignment[]
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
}

model Company {
  id             String          @id @default(uuid())
  name           String
  description    String?
  ownerId        String
  type           String? // Ex: "service-based", "facility-based"
  settings       Json?
  professionals  Professional[]
  establishments Establishment[]
  calendars      Calendar[]      @relation("CompanyCalendars")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Establishment {
  id         String     @id @default(uuid())
  name       String
  address    String?
  phone      String?
  openTime   String
  closeTime  String
  settings   Json?
  companyId  String
  company    Company    @relation(fields: [companyId], references: [id])
  facilities Facility[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Facility {
  id              String         @id @default(uuid())
  name            String
  description     String?
  capacity        Int?
  settings        Json?
  establishmentId String
  establishment   Establishment  @relation(fields: [establishmentId], references: [id])
  calendars       Calendar[]     @relation("FacilityCalendars")
  professionals   Professional[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Calendar {
  id             String       @id @default(uuid())
  name           String
  type           CalendarType
  description    String?
  isPublic       Boolean      @default(false)
  settings       Json?
  // Relações polimórficas
  userId         String? // Se for calendário de usuário
  professionalId String? // Se for calendário de profissional
  facilityId     String? // Se for calendário de facility
  companyId      String? // Se for calendário de company

  user         User?           @relation("UserCalendars", fields: [userId], references: [id])
  professional Professional?   @relation("ProfessionalCalendars", fields: [professionalId], references: [id])
  facility     Facility?       @relation("FacilityCalendars", fields: [facilityId], references: [id])
  company      Company?        @relation("CompanyCalendars", fields: [companyId], references: [id])
  events       CalendarEvent[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model CalendarEvent {
  id          String            @id @default(uuid())
  calendarId  String
  startTime   DateTime
  endTime     DateTime
  eventType   CalendarEventType
  title       String?
  description String?
  isAvailable Boolean           @default(true)
  metadata    Json?
  appointment Appointment? // Só se for um evento de agendamento

  calendar  Calendar @relation(fields: [calendarId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id                    String                  @id @default(uuid())
  professionalId        String
  clientId              String
  calendarEventId       String                  @unique
  status                AppointmentStatus       @default(PENDING)
  metadata              Json?
  professional          Professional            @relation(fields: [professionalId], references: [id], name: "ProfessionalAppointments")
  client                User                    @relation(fields: [clientId], references: [id], name: "ClientAppointments")
  calendarEvent         CalendarEvent           @relation(fields: [calendarEventId], references: [id])
  assignedProfessionals AppointmentAssignment[]
  rating                Rating?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
}

model AppointmentAssignment {
  id             String   @id @default(uuid())
  appointmentId  String
  professionalId String
  assignedAt     DateTime @default(now())

  appointment  Appointment  @relation(fields: [appointmentId], references: [id])
  professional Professional @relation(fields: [professionalId], references: [id])

  @@unique([appointmentId, professionalId])
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  type        NotificationType
  message     String
  deliveredAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

model Rating {
  id            String   @id @default(uuid())
  appointmentId String   @unique
  score         Int
  comment       String?
  createdAt     DateTime @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}
