generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  phone         String?        @unique
  document      String?        @unique
  role          Role
  professional  Professional?
  appointments  Appointment[]  @relation("ClientAppointments")
  notifications Notification[]
  calendars     Calendar[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Professional {
  id                   String                  @id @default(uuid())
  userId               String                  @unique
  businessName         String
  specialties          String[]
  profileDescription   String?
  subscriptionPlan     Plan                    @default(FREE)
  isActive             Boolean                 @default(true)
  averageRating        Float                   @default(0)
  totalRatings         Int                     @default(0)
  totalAppointments    Int                     @default(0)
  user                 User                    @relation(fields: [userId], references: [id])
  companyId            String?
  company              Company?                @relation(fields: [companyId], references: [id])
  appointments         Appointment[]           @relation("ProfessionalAppointments")
  assignedAppointments AppointmentAssignment[]
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  Calendar             Calendar[]
}

model Company {
  id             String          @id @default(uuid())
  name           String
  description    String?
  ownerId        String
  professionals  Professional[]
  establishments Establishment[]
  calendars      Calendar[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Establishment {
  id         String     @id @default(uuid())
  name       String
  address    String?
  phone      String?
  openTime   String
  closeTime  String
  companyId  String
  company    Company    @relation(fields: [companyId], references: [id])
  facilities Facility[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Facility {
  id              String        @id @default(uuid())
  name            String
  establishmentId String
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  calendars       Calendar[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Calendar {
  id             String          @id @default(uuid())
  userId         String?
  professionalId String?
  companyId      String?
  facilityId     String?
  blocks         CalendarBlock[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  user         User?         @relation(fields: [userId], references: [id])
  professional Professional? @relation(fields: [professionalId], references: [id])
  company      Company?      @relation(fields: [companyId], references: [id])
  facility     Facility?     @relation(fields: [facilityId], references: [id])
}

model CalendarBlock {
  id          String       @id @default(uuid())
  calendarId  String
  dateTime    DateTime
  duration    Int
  isAvailable Boolean      @default(true)
  reason      String? // âœ… Motivo do bloqueio
  appointment Appointment?

  calendar Calendar @relation(fields: [calendarId], references: [id])
}

model Appointment {
  id              String            @id @default(uuid())
  professionalId  String
  clientId        String
  calendarBlockId String            @unique
  status          AppointmentStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())

  professional  Professional  @relation(fields: [professionalId], references: [id], name: "ProfessionalAppointments")
  client        User          @relation(fields: [clientId], references: [id], name: "ClientAppointments")
  calendarBlock CalendarBlock @relation(fields: [calendarBlockId], references: [id])
  rating        Rating?

  assignedProfessionals AppointmentAssignment[]
}

model AppointmentAssignment {
  id             String   @id @default(uuid())
  appointmentId  String
  professionalId String
  assignedAt     DateTime @default(now())

  appointment  Appointment  @relation(fields: [appointmentId], references: [id])
  professional Professional @relation(fields: [professionalId], references: [id])

  @@unique([appointmentId, professionalId])
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  type        NotificationType
  message     String
  deliveredAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

model Rating {
  id            String   @id @default(uuid())
  appointmentId String   @unique
  score         Int
  comment       String?
  createdAt     DateTime @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

enum Role {
  CLIENT
  PROFESSIONAL
  ADMIN
}

enum Plan {
  FREE
  PRO
  PREMIUM
}

enum NotificationType {
  EMAIL
  PUSH
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
}
