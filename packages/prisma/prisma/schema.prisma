// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  name         String
  phone        String?        @unique
  document     String?        @unique
  role         Role
  professional Professional?
  appointments Appointment[]  @relation("ClientAppointments")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
}

model Establishment {
  id            String         @id @default(uuid())
  name          String
  address       String?
  phone         String?
  openTime      String // e.g. "08:00"
  closeTime     String // e.g. "18:00"
  professionals Professional[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Professional {
  id                 String         @id @default(uuid())
  userId             String         @unique
  establishmentId    String?
  businessName       String
  specialties        String[]
  profileDescription String?
  subscriptionPlan   Plan           @default(FREE)
  isActive           Boolean        @default(true)
  averageRating      Float          @default(0)
  totalRatings       Int            @default(0)
  totalAppointments  Int            @default(0)
  user               User           @relation(fields: [userId], references: [id])
  establishment      Establishment? @relation(fields: [establishmentId], references: [id])
  schedules          Schedule[]
  appointments       Appointment[]  @relation("ProfessionalAppointments")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@map("Professional")
}

model Schedule {
  id             String       @id @default(uuid())
  professionalId String
  dateTime       DateTime     @db.Timestamp
  duration       Int
  isAvailable    Boolean      @default(true)
  appointment    Appointment?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

  professional Professional @relation(fields: [professionalId], references: [id])
}

model Appointment {
  id             String   @id @default(uuid())
  professionalId String
  clientId       String
  scheduleId     String   @unique
  status         Status   @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  professional Professional @relation(fields: [professionalId], references: [id], name: "ProfessionalAppointments")
  client       User         @relation(fields: [clientId], references: [id], name: "ClientAppointments")
  schedule     Schedule     @relation(fields: [scheduleId], references: [id])
  rating       Rating? // ✅ Relacionamento com avaliação
}

model Rating {
  id            String   @id @default(uuid())
  appointmentId String   @unique
  score         Int
  comment       String?
  createdAt     DateTime @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  type        NotificationType
  message     String
  deliveredAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

enum Role {
  CLIENT
  PROFESSIONAL
  ADMIN
}

enum Status {
  PENDING
  CONFIRMED
  CANCELED
}

enum Plan {
  FREE
  PRO
  PREMIUM
}

enum NotificationType {
  EMAIL
  PUSH
}
